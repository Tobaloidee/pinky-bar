.\"t
.TH "pinkybar" "1" "Oktoberfest 13, 2016" "manual" ""
.SH NAME
.PP
This man page is converted from markdown, and some information might not
look good and/or have been stripped during the automated process.
.SH SYNOPSIS
.PP
pinkybar [\f[I]option\f[]]
.SH DESCRIPTION
.PP
dwm
.PP
[IMAGE: image (img/pic.png)]
.PP
xmonad
.PP
[IMAGE: image (img/pic5.png)]
.PP
[IMAGE: image (img/pic7.png)]
.PP
ncurses
.PP
[IMAGE: image (img/pic6.png)]
.PP
Gather some system information and show it in this statusbar program,
not tied to any Window Manager, terminal multiplexer, etc.
.PP
Please note that the program won't detect fans connected via molex
connetor(s) or external fan controller.
Also I have not tested it with fan splitter(s) either.
.PP
The program is smart enough to detect whether some of your fan(s) blades
are spinning, or the particular fan have been removed.
Hold down some of your fan blades and you'll see that the program won't
include this fan and it's RPM, release the blades and you'll see the fan
and it's RPM in the statusbar.
Try simulating real fan hardware failure by holding down all system fan
blades and watch what the program will show you, just try not to slice
your cheesy fingers open in the process.
.PP
If you compile your kernel from source code make sure to include your
cpu and motherboard sensors as \f[B]modules\f[] and not inlined.
.PP
\f[B]Just an example if you use BSD \- acpi/aibs, coretemp/amdtemp.\f[]
.PP
[IMAGE: image (img/cpu-temp.png)]
.PP
[IMAGE: image (img/mobo-temp.png)]
.PP
   *   *   *   *   *
.SS Bandwidth measurment
.PP
pinky\-bar supplies bandwitdh/network throughput measurment to satisfy
those users that pay for overpriced 3G/mobile internet, and want to
monitor every single megabit/megabyte.
.SS Program options
.PP
The order of supplied options will dictate how, where and what system
information to be shown.
.PP
.TS
tab(@);
l l l.
T{
short option
T}@T{
long option
T}@T{
Descrtiption
T}
_
T{
\-M
T}@T{
\[en]mpd
T}@T{
The song filename
T}
T{
\-W
T}@T{
\[en]mpdtrack
T}@T{
The song track name (not available in cmus)
T}
T{
\-x
T}@T{
\[en]mpdartist
T}@T{
The song artist(s) name(s)
T}
T{
\-X
T}@T{
\[en]mpdtitle
T}@T{
The song title
T}
T{
\-y
T}@T{
\[en]mpdalbum
T}@T{
The song album name
T}
T{
\-Y
T}@T{
\[en]mpddate
T}@T{
The song date
T}
T{
\-c
T}@T{
\[en]cpu
T}@T{
The current cpu load (summed up all cores/threads)
T}
T{
\-L
T}@T{
\[en]coresload
T}@T{
Show the load regarding each individual cpu core/thread
T}
T{
\-T
T}@T{
\[en]cputemp
T}@T{
The current cpu temperature
T}
T{
\-C
T}@T{
\[en]cpuspeed
T}@T{
Show your maximum cpu clock speed in MHz, regardless of the used
governor.
Uses assembly.
T}
T{
\-I
T}@T{
\[en]cpuinfo
T}@T{
Detect your CPU vendor, stepping, family, clflush, l1/l2 cache and line
size, physical cores, physical and virtual bits.
Uses assembly.
T}
T{
\-r
T}@T{
\[en]ramperc
T}@T{
The used ram in percentage
T}
T{
\-J
T}@T{
\[en]ramtotal
T}@T{
The total ram
T}
T{
\-K
T}@T{
\[en]ramfree
T}@T{
The free ram
T}
T{
\-l
T}@T{
\[en]ramshared
T}@T{
The shared ram
T}
T{
\-o
T}@T{
\[en]rambuffer
T}@T{
The buffer ram (not available in OpenBSD)
T}
T{
\-s
T}@T{
\[en]driveperc
T}@T{
The used drive storage in percentage
T}
T{
\-n
T}@T{
\[en]drivetotal
T}@T{
The total drive storage
T}
T{
\-N
T}@T{
\[en]drivefree
T}@T{
The free drive storage
T}
T{
\-O
T}@T{
\[en]driveavail
T}@T{
The available drive storage (total \- used)
T}
T{
\-g
T}@T{
\[en]battery
T}@T{
The remaining battery charge
T}
T{
\-z
T}@T{
\[en]dvdstr
T}@T{
The vendor and model name of your cdrom/dvdrom
T}
T{
\-S
T}@T{
\[en]statio
T}@T{
Read and written MBs to the drive so far [argument \- sda]
T}
T{
\-p
T}@T{
\[en]packages
T}@T{
The number of installed packages
T}
T{
\-P
T}@T{
\[en]kernsys
T}@T{
The kernel name
T}
T{
T}@T{
\[en]kernode
T}@T{
The network node hostname
T}
T{
\-Q
T}@T{
\[en]kernrel
T}@T{
The kernel release
T}
T{
\-R
T}@T{
\[en]kernver
T}@T{
The kernel version
T}
T{
\-u
T}@T{
\[en]kernarch
T}@T{
The machine architecture
T}
T{
\-k
T}@T{
\[en]kernel
T}@T{
Combined kernel name and version
T}
T{
\-q
T}@T{
\[en]weather
T}@T{
Show the temperature outside (some details must be provided)
T}
T{
\-U
T}@T{
\[en]uptime
T}@T{
The system uptime
T}
T{
\-w
T}@T{
\[en]loadavg
T}@T{
The system average load for past 1, 5 and 15 minutes
T}
T{
\-v
T}@T{
\[en]voltage
T}@T{
The system voltage
T}
T{
\-f
T}@T{
\[en]fans
T}@T{
All system fans and their speed in RPM
T}
T{
\-m
T}@T{
\[en]mobo
T}@T{
Show the motherboard name and vendor
T}
T{
\-d
T}@T{
\[en]mobotemp
T}@T{
The motherboard temperature
T}
T{
\-V
T}@T{
\[en]volume
T}@T{
The sound volume level
T}
T{
\-t
T}@T{
\[en]time
T}@T{
The current time
T}
T{
\-a
T}@T{
\[en]ipaddr
T}@T{
The local ip address [argument \- eth0]
T}
T{
\-b
T}@T{
\[en]bandwitdh
T}@T{
The consumed internet bandwidth so far [argument \- eth0]
T}
T{
\-i
T}@T{
\[en]iface
T}@T{
The current download and upload speed [argument \- eth0]
T}
T{
\-A
T}@T{
\[en]ipmac
T}@T{
The NIC mac address [argument \- eth0]
T}
T{
\-B
T}@T{
\[en]ipmask
T}@T{
The NIC subnet mask [argument \- eth0]
T}
T{
\-D
T}@T{
\[en]ipcast
T}@T{
The NIC broadcast address [argument \- eth0]
T}
T{
\-E
T}@T{
\[en]iplookup
T}@T{
Mini website IP lookup [website argument \- google.com]
T}
.TE
.PP
Be aware of the options that mention \f[B]Uses assembly\f[] are tested
only on AMD and Intel CPUs (starting from pentium 4 onwards).
.PP
The following options are available only in Linux:
.PP
.TS
tab(@);
l l l.
T{
short option
T}@T{
long option
T}@T{
Descrtiption
T}
_
T{
\-F
T}@T{
\[en]drivemodel
T}@T{
The vendor name of your drive [argument \- sda]
T}
T{
\-G
T}@T{
\[en]nicinfo
T}@T{
The NIC vendor and model [argument \- eth0]
T}
T{
T}@T{
\[en]nicdrv
T}@T{
The NIC driver [argument \- eth0]
T}
T{
\-H
T}@T{
\[en]nicver
T}@T{
The NIC version [argument \- eth0]
T}
T{
\-e
T}@T{
\[en]iplink
T}@T{
The NIC link speed (useful for wireless/wifi) [argument \- eth0]
T}
T{
\-j
T}@T{
\[en]nicfw
T}@T{
The NIC firmware [argument \- eth0]
T}
T{
\-h
T}@T{
\[en]wifiname
T}@T{
The name of currently connected wifi/wireless network [argument \-
wlan0]
T}
.TE
.PP
The following options are available only to FreeBSD and OpenBSD:
.PP
.TS
tab(@);
l l l.
T{
short option
T}@T{
long option
T}@T{
Descrtiption
T}
_
T{
\-j
T}@T{
\[en]nicgw
T}@T{
The NIC gateway address [argument \- re0]
T}
T{
\-Z
T}@T{
\[en]swapused
T}@T{
The used drive swap in MB
T}
T{
\-F
T}@T{
\[en]swaperc
T}@T{
The used drive swap in percentage
T}
T{
\-h
T}@T{
\[en]swaptotal
T}@T{
The total drive swap
T}
T{
\-H
T}@T{
\[en]swapavail
T}@T{
The available drive swap (total \- used)
T}
.TE
.PP
The following options are available only in OpenBSD:
.PP
.TS
tab(@);
l l l.
T{
short option
T}@T{
long option
T}@T{
Descrtiption
T}
_
T{
\-l
T}@T{
\[en]ramused
T}@T{
The used ram in MB
T}
.TE
.PP
   *   *   *   *   *
.SS GNU Build System (configure) options
.PP
Before the source code is passed to the compiler, you can enable/disable
the following \f[B]configure\f[] options that will increase/reduce the
number of dependencies required to compile the program.
.PP
It's up to you to decide which features suit you best.
.PP
.TS
tab(@);
l l l.
T{
To include
T}@T{
Not to include
T}@T{
Descrtiption
T}
_
T{
\[en]with\-x11
T}@T{
\[en]without\-x11
T}@T{
Enable it if you are using dwm.
T}
T{
\[en]with\-alsa
T}@T{
\[en]without\-alsa
T}@T{
To get the sound volume level.
T}
T{
\[en]with\-oss
T}@T{
\[en]without\-oss
T}@T{
To get the sound volume level in *BSD.
T}
T{
\[en]with\-net
T}@T{
\[en]without\-net
T}@T{
Enable the internet related options.
T}
T{
\[en]with\-libnl
T}@T{
\[en]without\-libnl
T}@T{
Enable the wifi related options regarding chipsets supporting the
cfg80211/mac80211 modules (linux only).
T}
T{
\[en]with\-pci
T}@T{
\[en]without\-pci
T}@T{
To get the NIC vendor and model in linux
T}
T{
\[en]with\-dvd
T}@T{
\[en]without\-dvd
T}@T{
To get the cdrom/dvdrom vendor and model
T}
T{
\[en]with\-sensors
T}@T{
\[en]without\-sensors
T}@T{
Alternative way to get the sensors values (linux only)
T}
T{
\[en]with\-apm
T}@T{
\[en]without\-apm
T}@T{
APM power and resource management for laptops (FreeBSD only)
T}
T{
\[en]with\-ncurses
T}@T{
\[en]without\-ncurses
T}@T{
Output the data to the terminal using the ncurses library, can be
colorized
T}
T{
\[en]with\-weather
T}@T{
\[en]without\-weather
T}@T{
The temperature outside (some details must be provided)
T}
T{
api_town=`London,uk'
T}@T{
T}@T{
Town and country code to use for temperature monitoring
T}
T{
api_key=`123458976'
T}@T{
T}@T{
API key obtained after registering yourself in the weather website
T}
T{
\[en]with\-colours
T}@T{
\[en]without\-colours
T}@T{
Colorize the output data.
T}
T{
icons=/tmp
T}@T{
T}@T{
xbm icons that can be used by dzen2 for example.
Discarded when \f[B]\[en]with\-x11\f[] is used
T}
T{
\[en]with\-mpd
T}@T{
\[en]without\-mpd
T}@T{
To see the currently played song name (if any).
T}
T{
\[en]prefix=/tmp
T}@T{
T}@T{
The directory where the program will be installed
T}
T{
mobo_sensor=`dev.aibs.0'
T}@T{
T}@T{
FreeBSD motherboard sensor module name to use in the sysctl calls.
Read the FreeBSD installation below
T}
T{
cpu_sensor=`dev.cpu.0.temperature'
T}@T{
T}@T{
FreeBSD cpu temperature module name to use in the sysctl calls .
Read the FreeBSD installation below
T}
.TE
.PP
By default, if \f[B]no\f[] options are passed, the program will be
compiled with/without:
.IP
.nf
\f[C]
\-\-without\-alsa\ \-\-without\-x11\ \-\-without\-mpd\ \-\-with\-colours\ \-\-with\-net\ \-\-with\-pci\ \-\-without\-dvd\ \-\-without\-sensors\ \-\-without\-ncurses\ \-\-without\-weather
\f[]
.fi
.PP
Affects only FreeBSD users with laptops, \f[B]\[en]without\-apm\f[] will
compile the program with acpi support to obtain the current battery
life.
.PP
\f[B]\[en]without\-mpd\f[] will compile the program with cmus support,
the options syntax stays as is.
.PP
The pci and sensors configure options will be discarded in *BSD.
If you supplied \f[B]\[en]with\-alsa\f[] and \f[B]\[en]with\-oss\f[] or
used the port package with the ncurses dialogue, alsa will have higher
precedence over OSS.
By default the port package will have OSS selected and alsa unselected.
.PP
Affects only linux, \f[B]\[en]with\-pci\f[] and or
\f[B]\[en]with\-sensors\f[] will substitute \-O0 flag to mitigate bugs
in GCC caused by \-O2 optimizations.
\-O0 will optimize the compiled binary for file size, while \-O2 will
optimize it for speed.
So don't be shocked to find out that \f[B]\[en]without\-pci
\[en]without\-sensors\f[] will cause the compiled binary to double it's
size.
If things doesn't improve with upcomining GCC releases I will temporary
drop \-O2.
.PP
Affects only linux users with wifi/wireless chipsets, run
\f[C]lsmod|grep\ 802\f[] and see whether your chipset uses
cfg80211/mac80211.
If that's so you can rely on libnl and enable \f[B]\[en]with\-libnl\f[]
configure options, otherwise your chipset probably still uses we/wext,
so type \f[B]\[en]without\-libnl\f[].
.PP
\f[B]\[en]with\-weather\f[] is using dis
url (http://openweathermap.org/current), register yourself there, create
a new API key (https://home.openweathermap.org/api_keys) and supply them
like dis to \f[B]configure\f[].
.PP
Don't just rush to register yourself, read carefully what the
\[lq]Free\[rq] account limits are and take in account how often the
program should call their api service.
I'm not responsible if you exceeded the limits, you've been warned.
.IP
.nf
\f[C]
#\ Make\ sure\ it\[aq]s\ working\ first
#\ curl\ \[aq]http://api.openweathermap.org/data/2.5/weather?q=London,uk&units=metric&APPID=28459ae16e4b3a7e5628ff21f4907b6f\[aq]

#\ what\ to\ pass\ to\ configure
\-\-with\-weather\ api_town=\[aq]London,uk\[aq]\ api_key=\[aq]28459ae16e4b3a7e5628ff21f4907b6f\[aq]
\f[]
.fi
.PP
   *   *   *   *   *
.SS Installation for dwm
.IP
.nf
\f[C]
bash\ bootstrap\ distro
\&./configure\ \-\-prefix=$HOME/.cache\ \-\-with\-x11\ \-\-with\-alsa
make
make\ install
\f[]
.fi
.PP
To see the currently played song name add \f[B]\[en]with\-mpd\f[] to
configure.
.PP
To disable the colours you can add \f[B]\[en]without\-colours\f[] to
configure.
.PP
Put the following in your \f[B]xinitrc\f[] or the script used to start
dwm.
.IP
.nf
\f[C]
#\ Execute\ the\ "statusbar"\ program\ every\ 5\ secs
while\ true;\ do
\ \ #\ scroll\ a\ few\ lines\ up\ to\ see\ the\ rest\ options
\ \ "$HOME/.cache/bin/pinkybar"\ \-LTrspkvfmdVt
\ \ sleep\ 5
done\ &
\f[]
.fi
.SS Installation for xmonad (or other WM)
.IP
.nf
\f[C]
#\ Copy\ the\ xbm\ icons
mkdir\ \-p\ \-\-mode=700\ $HOME/.xmonad/icons
cp\ \-r\ xbm_icons/*.xbm\ $HOME/.xmonad/icons

bash\ bootstrap\ distro

#\ disable\ X11,\ point\ the\ location\ to\ the\ icons
\&./configure\ \-\-prefix=$HOME/.cache\ \-\-without\-x11\ \-\-with\-alsa\ icons=$HOME/.xmonad/icons

#\ compile\ \[aq]n\ install
make
make\ install
\f[]
.fi
.PP
To see the currently played song name add \f[B]\[en]with\-mpd\f[] to
configure.
.PP
Put the following in your \f[B]xinitrc\f[] or the script used to start
xmonad.
.IP
.nf
\f[C]
#\ Execute\ the\ "statusbar"\ program\ every\ 2\ secs
while\ true;\ do
\ \ #\ scroll\ a\ few\ lines\ up\ to\ see\ the\ rest\ options
\ \ "$HOME/.cache/bin/pinkybar"\ \-LTrspkvfmdVt
\ \ sleep\ 2
done\ |\ dzen2\ \-w\ 1800\ \-x\ 130\ \-ta\ r\ \-fn\ \[aq]\-*\-dejavusans\-*\-r\-*\-*\-11\-*\-*\-*\-*\-*\-*\-*\[aq]\ &
\f[]
.fi
.SS Installation in FreeBSD
.PP
FreeBSD has no other way than using the module specific convention to
query sysctl and obtain data from the sensors.
Maintaining a list with all the possible module names and performing
expensive sysctl calls in a loop to determine that X module is loaded
into your system is no\-go.
Be prepared to spend a minute or two to find out some system
information.
.PP
Let's say you are using dwm:
.PP
Determine the motherboard sensor module name.
.IP
.nf
\f[C]
sysctl\ \-a|grep\ \[aq]aibs\[aq]

dev.aibs.0.volt.0:\ 1356\ 850\ 1600
dev.aibs.0.volt.1:\ 3344\ 2970\ 3630
dev.aibs.0.volt.2:\ 5040\ 4500\ 5500
dev.aibs.0.volt.3:\ 12278\ 10200\ 13800
dev.aibs.0.temp.0:\ 39.0C\ 60.0C\ 95.0C
dev.aibs.0.temp.1:\ 38.0C\ 45.0C\ 75.0C
dev.aibs.0.fan.0:\ 1053\ 600\ 7200
dev.aibs.0.fan.1:\ 1053\ 600\ 7200
\f[]
.fi
.PP
Copy only `dev.MODULE.NUMBER' (if there is any number at all) and paste
it into the \f[B]mobo_sensor\f[] option below.
.PP
Do the same for your cpu temperature, copy and paste the variable as is.
\f[B]dev.cpu.0.temperature\f[] below is provied as example.
.IP
.nf
\f[C]
bash\ bootstrap\ freebsd
\&./configure\ \-\-prefix=$HOME/.cache\ \-\-with\-x11\ \-\-without\-alsa\ \-\-with\-oss\ mobo_sensor=\[aq]dev.aibs.0\[aq]\ cpu_sensor=\[aq]dev.cpu.0.temperature\[aq]
make
make\ install
\f[]
.fi
.PP
Send a request to the FreeBSD mail list and request the OpenBSD sensors
API to be ported.
.SS Installation in OpenBSD
.PP
Before even executing the \f[B]bootstrap\f[] script, you'll have to do
this:
.IP
.nf
\f[C]
#\ To\ detect\ the\ newer\ compiler\ that\ you\ are
#\ about\ to\ install
sed\ \-i\ \[aq]s/#AC_PROG_CC(/AC_PROG_CC(/g\[aq]\ bootstrap

ls\ /usr/local/bin/automake\-*
ls\ /usr/local/bin/autoconf\-*

#\ Then\ replace\ the\ numbers\ below
export\ AUTOCONF_VERSION=2.69
export\ AUTOMAKE_VERSION=1.15

#\ Your\ call,\ gcc\ or\ llvm\ ?
pkg_add\ gcc
\f[]
.fi
.SS pinky curses installation
.IP
.nf
\f[C]
bash\ bootstrap\ distro

#\ disable\ X11,\ enable\ the\ colours\ and\ ncurses\ opts.
\&./configure\ \-\-prefix=$HOME/.cache\ \-\-without\-x11\ \-\-with\-alsa\ \-\-with\-colours\ \-\-with\-ncurses

#\ compile\ \[aq]n\ install
make\ all\ ncurses
make\ install
\f[]
.fi
.PP
Put the following in your shell config as function or alias.
.IP
.nf
\f[C]
pinky()\ {
\ \ location="${HOME}/.cache/bin"

\ \ while\ true;\ do
\ \ \ \ #\ scroll\ a\ few\ lines\ up\ to\ see\ the\ rest\ options
\ \ \ \ "${location}"/pinkybar\ \-LTrspkvfmdVt
\ \ \ \ sleep\ 2
\ \ done\ |\ "${location}"/ncurses
}
\f[]
.fi
.PP
Test it:
.IP
.nf
\f[C]
pinky\ \ #\ Press\ CTRL\ +\ C\ to\ stop\ the\ program
\f[]
.fi
.PP
Put the following in \f[B]~/.Xresources\f[]
.IP
.nf
\f[C]
!\ Xft\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Xft.dpi:\ \ \ \ \ \ \ \ 96
Xft.antialias:\ \ true
Xft.rgba:\ \ \ \ \ \ \ rgb
Xft.hinting:\ \ \ \ true
Xft.hintstyle:\ \ hintslight
Xft.autohint:\ \ \ false
Xft.lcdfilter:\ \ lcddefault


!\ urxvt\ conf\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
URxvt.buffered\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ true
URxvt.cursorBlink\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.cursorUnderline\ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.pointerBlank\ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.geometry\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ 80x24
URxvt.font\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ xft:DejaVu\ Sans\ Mono:bold:pixelsize=11
URxvt.boldfont\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ xft:DejaVu\ Sans\ Mono:bold:pixelsize=11
URxvt.letterSpace\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ \-1
URxvt.termName\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ rxvt\-256color
URxvt.iso14755\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.iso14755_52\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.cursorColor\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ #ffffff
URxvt.colorIT\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ #87af5f
URxvt.colorBD\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ #d7d7d7
URxvt.colorUL\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ #87afd7
URxvt.urgentOnBell\ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.mapAlert\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.visualBell\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.saveLines\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ 10000
URxvt.scrollBar\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.scrollBar_right\ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.scrollBar_floating\ \ \ \ \ \ \ \ :\ false
URxvt.scrollstyle\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ rxvt
URxvt.Depth\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ 32
URxvt.loginShell\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.insecure\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.pastableTabs\ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.utmpInhibit\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.reverseVideo\ \ \ \ \ \ \ \ \ \ \ \ \ \ :\ false
URxvt.skipBuiltinGlyphs\ \ \ \ \ \ \ \ \ :\ true


!\ urxvt\ colours\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
*.foreground:\ \ \ #c5c8c6
*.background:\ \ \ #222222
*.cursorColor:\ \ #ffffff

!\ black
*.color0:\ \ \ \ \ \ \ #222222
*.color8:\ \ \ \ \ \ \ #373b41

!\ red
*.color1:\ \ \ \ \ \ \ #ef2929
*.color9:\ \ \ \ \ \ \ #ef2929

!\ green
*.color2:\ \ \ \ \ \ \ #8ae234
*.color10:\ \ \ \ \ \ #8ae234

!\ yellow
*.color3:\ \ \ \ \ \ \ #c2a000
*.color11:\ \ \ \ \ \ #fce94d

!\ blue
*.color4:\ \ \ \ \ \ \ #5f819d
*.color12:\ \ \ \ \ \ #81a2be

!\ magenta
*.color5:\ \ \ \ \ \ \ #85678f
*.color13:\ \ \ \ \ \ #a97fa8

!\ cyan
*.color6:\ \ \ \ \ \ \ #5e8d87
*.color14:\ \ \ \ \ \ #34e2e2

!\ white
*.color7:\ \ \ \ \ \ \ #ffffff
*.color15:\ \ \ \ \ \ #ffffff


!\ xterm\ conf\ \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
XTerm.vt100.geometry:\ \ \ 80x24
XTerm*faceName:\ \ \ \ \ DejaVu\ Sans\ Book
XTerm*faceSize:\ \ \ \ \ 9
XTerm*toolBar:\ \ \ \ \ \ off

xterm*termName:\ xterm\-256color
XTerm*locale:\ true
xterm*cursorColor:\ #FFFFFF
xterm*toolBar:\ false
xterm*scrollBar:\ false
xterm*rightScrollBar:\ false
xterm*background:\ #222222
xterm*foreground:\ #999999
xterm*faceName:\ DejaVu\ Sans\ Book:pixelsize=12
xterm*allowBoldFonts:\ false
xterm*geometry:\ 80x24
\f[]
.fi
.PP
Force your non xterm/urxvt terminal emulator to use the newer
xterm/urxvt colours.
You'll have to kill Xorg (simply logout and log back in), experienced
people are using xrdb instead killing Xorg each time they do changes to
such files.
.PP
pinky_curses is standalone program not tied to pinky\-bar.
.IP
.nf
\f[C]
#\ ^B\ \-\ Blue\ ,\ ^M\ \-\ Magenta\ ,\ ^Y\ \-\ Yellow
while\ true;\ do\ echo\ "^BOh\ ^Mhello\ ^Ydear";sleep\ 1;done\ |\ ./pinky_curses
\f[]
.fi
.SS Installation for anything else
.PP
pinky\-bar is no longer tied to Window Managers only.
With the addition of \[lq]without colours\[rq], the output can be shown
in any program, just bear in mind that the more options you've supplied
the more system information will be shown.
.PP
[IMAGE: image (img/pic4.png)]
.PP
The installation steps:
.IP
.nf
\f[C]
bash\ bootstrap\ distro
\&./configure\ \-\-prefix=$HOME/.cache\ \-\-without\-x11\ \-\-without\-colours
make
make\ install
\f[]
.fi
.PP
By choosing this 3rd installation method it is up to you where, how to
start and use the system information that's produced by pinky\-bar.
.PP
   *   *   *   *   *
.PP
Replace \f[B]distro\f[] with archlinux, debian, gentoo, slackware, rhel,
frugalware, angstrom.
Here's some short distros list of some popular distros that are based on
another one:
.IP \[bu] 2
[x] archlinux based distros: parabola, chakra, manjaro
.IP \[bu] 2
[x] debian based distros: ubuntu, linux mint, trisquel, back track, kali
linux, peppermint linux, solusos, crunchbang, deepin, elementary os, and
the rest *buntu based distros
.IP \[bu] 2
[x] gentoo based distros: funtoo, sabayon, calculate linux
.IP \[bu] 2
[x] slackware
.IP \[bu] 2
[x] rhel based distros: opensuse (uses rpm), fedora, fuduntu, mandriva,
mandrake, viperr, mageia
.IP \[bu] 2
[x] frugalware
.IP \[bu] 2
[x] angstrom
.PP
Cannot list the *BSD flavours as \[lq]distros\[rq], so they deserve own
options:
.IP \[bu] 2
[x] freebsd
.IP \[bu] 2
[x] openbsd
.PP
   *   *   *   *   *
.SS Linux Mandatory requirements
.IP \[bu] 2
gcc/clang
.IP \[bu] 2
glibc
.IP \[bu] 2
autoconf
.IP \[bu] 2
automake
.IP \[bu] 2
m4
.IP \[bu] 2
gawk
.SS *BSD Mandatory requirements
.IP \[bu] 2
gcc/clang
.IP \[bu] 2
bash
.IP \[bu] 2
autoconf
.IP \[bu] 2
automake
.IP \[bu] 2
autoconf\-wrapper
.IP \[bu] 2
automake\-wrapper
.IP \[bu] 2
autoconf\-archive
.IP \[bu] 2
argp\-standalone
.IP \[bu] 2
libtool
.IP \[bu] 2
m4
.IP \[bu] 2
gawk
.PP
Some llvm and gcc versions will not check for headers and libraries in
/usr/local, if that's the case for you, you should export the following
environment variables:
.IP
.nf
\f[C]
export\ LDFLAGS=\[aq]\-L/usr/local/lib\[aq]
export\ CFLAGS=\[aq]\-I/usr/local/include\[aq]
\f[]
.fi
.SS Opt\-in requirements
.PP
Linux camp:
.PP
The internet related options rely on headers provided iproute2.
By default the program will try to compile with those headers included.
If for any reason you would like to compile the program without internet
related options, then pass \f[B]\[en]without\-net\f[] to configure.
.IP \[bu] 2
iproute2
.PP
wifi/wireless chipsets supporting mac80211/cfg80211:
.IP \[bu] 2
libnl (>= 3.0)
.IP \[bu] 2
pkg\-config
.PP
Then pass \f[B]\[en]with\-libnl\f[] to configure.
.PP
To get the NIC vendor and model names:
.IP \[bu] 2
pciutils
.PP
Alternative way to obtain data from the sensors:
.IP \[bu] 2
lm_sensors
.PP
Linux camp end.
.PP
To get the sound volume level:
.IP \[bu] 2
alsa\-utils
.IP \[bu] 2
alsa\-lib
.PP
Then pass \f[B]\[en]with\-alsa\f[] to configure.
.PP
*BSD users can use the baked OSS instead, pass \f[B]\[en]without\-alsa
\[en]with\-oss\f[] to configure instead.
.PP
To output the data to the terminal using the ncurses library:
.IP \[bu] 2
ncurses
.PP
To get the vendor and model name of your cdrom/dvdrom/blu\-ray:
.IP \[bu] 2
libcdio
.IP \[bu] 2
libcddb
.PP
In linux \f[B]\[en]without\-dvd\f[] will still compile the program with
dvd support.
Except it will be limited only to dvd support, it will try to parse the
sr0 vendor and model name detected by the kernel.
.PP
The weather related options, please go back and read \f[B]Don't just
rush to register yourself\f[]:
.IP \[bu] 2
curl
.IP \[bu] 2
gzip
.PP
\f[B]Warning, I'm not responsible for any lawsuit towards you, neither
encourage you to pirate content that is not licensed as free and/or for
fair use.\f[]
.PP
To see the currently played song name \f[B]\[en]with\-mpd\f[]:
.PP
Server side:
.IP \[bu] 2
libmpdclient
.IP \[bu] 2
mpd (can be build with soundcloud support)
.PP
Client side:
.IP \[bu] 2
libmpdclient
.IP \[bu] 2
mpc/ncmpc/ncmpcpp, and the rest (http://mpd.wikia.com/wiki/Clients)
.PP
To see the currently played song name \f[B]\[en]without\-mpd\f[]:
.IP \[bu] 2
cmus
.PP
The \[lq]soundcloud\[rq] alternative that is supported in cmus and your
mpd client will be to download \f[B]\&.m3u/.pls\f[] files according to
the radio stream station (https://www.internet-radio.com) that you are
interested to listen.
.PP
The FreeBSD users will notice that \[lq]mpd\[rq] is named
\[lq]musicpd\[rq].
.PP
Here's an example of my \f[B]/etc/mpd.conf\f[] (linux)
.IP
.nf
\f[C]
music_directory\ "/home/frost/music"
playlist_directory\ "/home/frost/music"
db_file\ "/tmp/mpddb"
log_file\ "/tmp/mpdlog"
state_file\ "/tmp/mpdstate"
pid_file\ "/tmp/mpdpid"
log_level\ "default"
user\ "mpd"

audio_output\ {
\ \ type\ "alsa"
\ \ name\ "My\ sound\ card"
\ \ mixer_type\ "software"
}

port\ "6600"
bind_to_address\ "127.0.0.1"
\f[]
.fi
.PP
FreeBSD conf, same as the Linux one, you'll have to add the
\[lq]musicpd\[rq] daemon user on your own:
.IP
.nf
\f[C]
user\ "musicpd"

audio_output\ {
\ \ type\ "oss"
\ \ name\ "My\ sound\ card"
\ \ mixer_type\ "software"
}
\f[]
.fi
.PP
OpenBSD conf, same as the FreeBSD one, just replace audio_output with:
.IP
.nf
\f[C]
audio_output\ {
\ \ type\ "ao"
\ \ name\ "My\ sound\ card"
\ \ mixer_type\ "software"
}
\f[]
.fi
.PP
Keep an eye on the \f[B]log file size\f[] if you are using raspberry pi
(or equivalent device) that streams the music, make sure that it's
deleted automatically if it exceeds some pre\-defined size.
.PP
   *   *   *   *   *
.SS WM specific requirements
.PP
If you would like the output to be shown in your Window Manager, those
are the following requirements:
.PP
for non\-dwm WM:
.IP \[bu] 2
dzen2
.PP
for dwm:
.IP \[bu] 2
libx11
.IP \[bu] 2
xorg\-server
.PP
use \f[B]\[en]without\-colours\f[] to skip the following step:
.IP \[bu] 2
dwm compiled with statuscolor patch.
The colours in use are specified in your dwm config.h
.SS Wish list
.PP
As top priority:
.PP
It would be great if I had *BSD compatible usb wifi dongle to add wifi
options in pinky\-bar.
.PP
   *   *   *   *   *
.PP
With the help from the gcc documentation, this wish list option has been
solved.
.PP
[STRIKEOUT:Per core/thread CPU frequency detection: Can add it at any
time if there is enough demand, but needs some consideration first.]
.PP
[STRIKEOUT:The kernels cpu frequency governor \[lq]performance\[rq] will
always run at the highest possible clock rate regardless of it's
use/idle. The only side effect of this is higher temps when on idle
(true if the cpu has multiple cores and or threads).]
.PP
[STRIKEOUT:The \[lq]powersaving\[rq] governor will always run at the
lowest possible clock rate regardless of it's use/idle. The side effect
\- slower machine no matter what you do.]
.PP
[STRIKEOUT:The \[lq]ondemand\[rq] governor does what it says \- ondemand
scaling. With it you get the best performance when you need to,
powersaving and lower temps when on idle.]
.PP
[STRIKEOUT:For example I manually turn off the cpu frequency governor in
my kernel builds, which sets it to performance.]
.PP
[STRIKEOUT:The cpu frequency detection is easy, but it poses a roadblock
by assuming that the \[lq]ondemand\[rq] is set and/or is enabled in the
user kernel.]
.PP
[STRIKEOUT:Decision 1: On a multicore/thread cpu, the detection for each
core/thread will produce up to 8 digit number, thus 4 core and 4 thread
cpu will produce: 1234.5678 1234.5678 1234.5678 1234.5678 1234.5678
1234.5678 1234.5678 1234.5678, without including MHz for each
core/thread, which will take a lot of space in the final statusbar
output. This way the user will know for how long and which core/thread
is under some load.]
.PP
[STRIKEOUT:Decision 2: On other hand it will be lame on a multi
core/thread system to show the overall (not per core/thread) cpu
frequency that have been summed up, which will beat the purpose of cpu
frequency detection in first place, as the user will not be aware that
some core/thread is running at full cpu clock speed as the load will be
spread equally when summing the numbers up.]
.PP
   *   *   *   *   *
.PP
GPU temperature, voltage, fan(s) and used RAM: hard, but not impossible.
.PP
It would be nice to have decent gpu temperature, voltage, fan(s) speed
and used RAM detection regarding SLI, single and dual gpu cards that
doesn't require X, MESA and \f[B]/sys/kernel/debug/dri\f[]
.PP
Using assembly is strongly no\-go.
.PP
   *   *   *   *   *
.PP
Currently played filename in
VLC (https://github.com/videolan/vlc/blob/master/src/libvlc.c): easy to
be added.
.PP
Unless MPRIS is replaced with sockets, I am not willing to add dbus as
dependency to pinky\-bar.
.IP
.nf
\f[C]
//\ The\ "MPRIS_BUS_NAME"\ macro\ from\ libvlc
dbus_message_new_method_call(
\ \ "org.mpris.MediaPlayer2.vlc",
\ \ "/org/mpris/MediaPlayer2",
\ \ "org.mpris.MediaPlayer2.Player",
\ \ "Metadata");
//\ results\ in:\ \ \[aq]xesam:url\[aq]:\ <\[aq]file:///home/frost/music/Summer_Sixteen.mp3\[aq]>\ 
\f[]
.fi
.PP
   *   *   *   *   *
.PP
Show the idle time in seconds/minutes: easy to be added via
XScreenSaverQueryInfo (http://linux.die.net/man/3/xscreensaverqueryinfo),
but will discriminate the users that have compiled the program
\f[B]\[en]without\-x11\f[].
.PP
   *   *   *   *   *
.PP
Show the CapsLock/NumLock/ScrollLock indicator status for keyboard
without LEDs: easy to be added via
XkbGetIndicatorState (http://linux.die.net/man/3/xkbgetindicatorstate),
but will discriminate the users that have compiled the program
\f[B]\[en]without\-x11\f[].
.SH REPORTING BUGS
.PP
Report bugs to https://gitlab.com/void0/pinky\-bar
.SH COPYRIGHT
.PP
Copyright (c) 2016 Aaron Caffrey
.PD 0
.P
.PD
Free use of this software is granted under the terms of the GNU General
Public License (GPL).
.SH AUTHORS
Aaron Caffrey.
